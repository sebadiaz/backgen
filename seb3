int paint;
int dis;
int speed;
int rulecounter;
int smooth = 1;
int xyz=256;
field g;
int randomcolor(){return floor(random(#000000,#ffffff));}
void setup(){size(256,256,P2D);g = new field();loadPixels();}
void draw() {
    speed=floor(dist(pmouseX,pmouseY,mouseX,mouseY));
    if(mousePressed){
      if(mouseButton==LEFT) {
        paint = randomcolor();
        } else { paint = #ffffff; }
    }
  g.update();
  g.display();
  if(rulecounter++%100==0){g.randomrule();}
}
class field {
  subdivision[][] rid;
  long[] RULE;
  field() {
      RULE = new long[4];
      randomrule();
      int[] VAL;
      rid = new subdivision[xyz][xyz];
      for (int y = 0 ; y < xyz; y++) {
      for (int x = 0 ; x < xyz; x++) {
        VAL = new int []{#ffffff,#ffffff,#ffffff,#ffffff};
        rid[x][y] = new subdivision(x,y,VAL,RULE);
      }}
      for (int y = 0 ; y < xyz; y++) {
      for (int x = 0 ; x < xyz; x++) {
        rid[x][y].set_neighbours(this.rid);
    }}
  }
long randomlong(){
  long result = floor(random(0,65536)); 
  for(int i=0;i<3;i++){
  result<<= 24;
  result+=floor(random(0,16777216));
  }
  return result;
}
void randomrule(){
  RULE[0] = randomlong();
  RULE[1] = randomlong();
  RULE[2] = randomlong();
  RULE[3] = randomlong();
}
void update(){
  for (int y=0;y<xyz;y++){
  for (int x=0;x<xyz;x++){
    rid[x][y].update_pixels();
  }}
}
void display(){
  updatePixels();
  for (int y=0;y<xyz;y++){
  for (int x=0;x<xyz;x++){
      rid[x][y].buffer();
  }}
}
}
class subdivision{
  long [] rule;
  int [] ra; // results array
  int [] val; // value array
  int x,y; // coordinate of the pixel
  int xy; // x,y in one dimensional framebuffer
  int [][] neighbours;
  subdivision(int X, int Y,    int[]VAL, long[]RULE){
                x=X;   y=Y;     val=VAL;  rule=RULE;
                xy = x+xyz*y;
                neighbours = new int [8][4];
                ra = new int [4];
  }
  void set_neighbours(subdivision[][] rid){
    int x1,x3,y1,y3;
    for ( int i=0; i < 4; i++) {
      x1=(x+1)%xyz; x3=(x+xyz-1)%xyz; // 3 is -1 as it "wraps around"
      y1=(y+1)%xyz; y3=(y+xyz-1)%xyz;
      // surrounding pixels clockwise
      neighbours[ 0] = rid[x1][y3].val;
      neighbours[ 1] = rid[x1][ y].val;
      neighbours[ 2] = rid[x1][y1].val;
      neighbours[ 3] = rid[ x][y1].val;
      neighbours[ 4] = rid[x3][y1].val;
      neighbours[ 5] = rid[x3][ y].val;
      neighbours[ 6] = rid[x3][y3].val;
      neighbours[ 7] = rid[ x][y3].val;  
    }
  }
 
  /* Thanks to u/ErasmusDarwin */
  int blackbox(long n,long rule){return int((rule>>(n*4))&15);}
 
  int pixel(int foo, int bar) { 
  if (smooth <= 0){return foo;} else if(smooth >= 8){return bar;} else{
  int r,g,b;
  r = ( ( (foo >> 16 & 0xFF) * ((1 << smooth) -1) + (bar >> 16 & 0xFF) ) >> smooth ) << 16;
  g = ( ( (foo >>  8 & 0xFF) * ((1 << smooth) -1) + (bar >>  8 & 0xFF) ) >> smooth ) << 8;
  b = ( ( (foo       & 0xFF) * ((1 << smooth) -1) + (bar       & 0xFF) ) >> smooth );
  return r+g+b;
  }
  }
 
  int merge(){
  int r,g,b;
  r = (((ra[0] >> 16 & 0xFF) + (ra[1] >> 16 & 0xFF) + (ra[2] >> 16 & 0xFF) + (ra[3] >> 16 & 0xFF)) >> 2) << 16;
  g = (((ra[0] >>  8 & 0xFF) + (ra[1] >>  8 & 0xFF) + (ra[2] >>  8 & 0xFF) + (ra[3] >>  8 & 0xFF)) >> 2) << 8;
  b = ((ra[0]        & 0xFF) + (ra[1]       & 0xFF) + (ra[2]       & 0xFF) + (ra[3]       & 0xFF)) >> 2;
  return #000000+r+g+b;
  }
  void update_pixels() {
    dis=floor(dist(mouseX,mouseY,x,y));
    int c;   // comparission
    int t;  // transformation
    int r; // result
    int top, bottom, layer; // 
    for (int l=0; l<4; l++){
      if(mousePressed) {
        smooth = max(0,min(8,dis >> 6));
        } else {
        smooth=0;
        }
      if(mousePressed && dis<1+speed) {
        r = paint;
        } else {
        top = (l+1)%4; bottom=(l+3)%4;
        c=0;
        for (int n=0; n<8; n++){
        if ( val[l] > neighbours[ n][top] ) {c++;}
        if ( val[l] > neighbours[ n][bottom] ) {c++;}
        }
        t=blackbox(c,rule[l]);
        if (t<=7){ layer = top; } else { t-=8; layer=bottom; }
        r=neighbours[t][layer];
        }
      ra[l]=pixel(r,val[l]);
    }
    pixels[xy] = merge();
  }
  void buffer() {
    for (int l=0; l<4; l++) {
      val[l]=ra[l];
    }
  }
}
